#!/usr/bin/python3
#	ripmachine - GUI-driven CD/DVD ripper
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of ripmachine.
#
#	ripmachine is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	ripmachine is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with ripmachine; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
from FriendlyArgumentParser import FriendlyArgumentParser
from RipCore import RipCore

parser = FriendlyArgumentParser()
parser.add_argument("--callback-id", metavar = "id", type = str, help = "ID to include into report file for tracking.")
parser.add_argument("-m", "--force-medium", choices = [ "audio", "data", "dvd", "bluray" ], action = "append", default = [ ], help = "Force only specific media types to be detected. Can speed up the initialization phase. Allowed choices are %(default)s, can be specified multiple times.")
parser.add_argument("-d", "--update-delay", metavar = "secs", type = float, default = 5, help = "Time interval in which to check for progress. Defaults to %(default).0f seconds.")
parser.add_argument("--mock", choices = [ "audio", "riperror" ], help = "Completely mock the ripping process for testing. Can be one of %(choices)s to simulate different scenarios.")
parser.add_argument("--audiorip", choices = [ "cdda2wav", "cdparanoia" ], default = "cdda2wav", help = "When ripping audio CDs, chooses the program. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("--fast-rip", action = "store_true", help = "For audio CD ripping, disable all paranoia checks. Improves speed, but may decrease rip quality.")
parser.add_argument("-f", "--force", action = "store_true", help = "Do not ask for confirmation before overwriting files.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity during ripping. Can be specified multiple times.")
parser.add_argument("drive", metavar = "src_drive", type = str, help = "Device drive to rip data from")
parser.add_argument("destdir", metavar = "destdir", type = str, help = "Destination directory to place ripped data in")
args = parser.parse_args(sys.argv[1:])

if (args.mock is None) and (not os.path.exists(args.drive)):
	print("No valid drive: %s" % (args.drive), file = sys.stderr)
	sys.exit(1)

ripper = RipCore(args)
ripper.commence()
